# app.py ‚Äî CLARA ‚Ä¢ Sua Assistente Jur√≠dica Pessoal
# Vers√£o completa com servi√ßos funcionais + casos campe√µes

import os
import io
import re
import csv
import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple, Set, List
import streamlit as st

# ---- m√≥dulos locais ----
from app_modules.pdf_utils import extract_text_from_pdf
from app_modules.analysis import analyze_contract_text, summarize_hits, compute_cet_quick
from app_modules.stripe_utils import init_stripe, create_checkout_session, verify_checkout_session
from app_modules.storage import (
    init_db,
    log_analysis_event,
    log_subscriber,
    list_subscribers,
    get_subscriber_by_email,
)

# -------------------------------------------------
# Configs
# -------------------------------------------------
APP_TITLE = "CLARA ‚Ä¢ Sua Assistente Jur√≠dica Pessoal"
VERSION = "v3.0"

st.set_page_config(page_title=APP_TITLE, page_icon="‚öñÔ∏è", layout="wide")

# Secrets
STRIPE_PUBLIC_KEY = st.secrets.get("STRIPE_PUBLIC_KEY", "")
STRIPE_SECRET_KEY = st.secrets.get("STRIPE_SECRET_KEY", "")
STRIPE_PRICE_ID = st.secrets.get("STRIPE_PRICE_ID", "")
BASE_URL = st.secrets.get("BASE_URL", "https://claraready.streamlit.app")

MONTHLY_PRICE_TEXT = "R$ 9,90/m√™s"

# -------------------------------------------------
# Estilo Moderno + CLARA Identity
# -------------------------------------------------
st.markdown(
    """
    <style>
    :root {
        --clara-gold: #D4AF37;
        --clara-blue: #ABDBF0;
        --clara-dark: #0f172a;
        --clara-gray: #475569;
        --clara-light: #f8fafc;
        --clara-success: #10b981;
        --clara-warning: #f59e0b;
        --clara-danger: #ef4444;
    }
    
    .clara-hero {
        background: linear-gradient(135deg, var(--clara-dark) 0%, #1e293b 100%);
        color: white;
        padding: 4rem 0;
        text-align: center;
        border-radius: 0 0 20px 20px;
    }
    
    .clara-hero-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 2rem;
    }
    
    .clara-badge {
        background: var(--clara-gold);
        color: var(--clara-dark);
        padding: 0.5rem 1.5rem;
        border-radius: 50px;
        font-weight: 700;
        font-size: 0.9rem;
        display: inline-block;
        margin-bottom: 1.5rem;
    }
    
    .clara-title {
        font-size: 3.5rem;
        font-weight: 800;
        margin: 1rem 0;
        line-height: 1.1;
    }
    
    .clara-subtitle {
        font-size: 1.3rem;
        opacity: 0.9;
        margin-bottom: 2rem;
        line-height: 1.6;
    }
    
    .clara-card {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border: 1px solid #e2e8f0;
        margin: 1rem 0;
        transition: transform 0.2s ease;
    }
    
    .clara-card:hover {
        transform: translateY(-2px);
    }
    
    .clara-service-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .clara-feature {
        text-align: center;
        padding: 1.5rem;
    }
    
    .clara-feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }
    
    .clara-btn-primary {
        background: var(--clara-gold) !important;
        color: var(--clara-dark) !important;
        border: none !important;
        font-weight: 600 !important;
        padding: 0.75rem 1.5rem !important;
        border-radius: 12px !important;
    }
    
    .clara-step {
        display: flex;
        align-items: center;
        margin: 1rem 0;
        padding: 1.5rem;
        background: var(--clara-light);
        border-radius: 12px;
        border-left: 4px solid var(--clara-gold);
    }
    
    .clara-step-number {
        background: var(--clara-gold);
        color: var(--clara-dark);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-right: 1rem;
        font-size: 1.2rem;
    }
    
    .service-active {
        border: 2px solid var(--clara-gold);
        background: #fffbf0;
    }
    
    .result-success {
        border-left: 4px solid var(--clara-success);
        background: #f0fdf4;
    }
    
    .result-warning {
        border-left: 4px solid var(--clara-warning);
        background: #fffbeb;
    }
    
    .result-danger {
        border-left: 4px solid var(--clara-danger);
        background: #fef2f2;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# -------------------------------------------------
# Estado da Sess√£o
# -------------------------------------------------
if "current_view" not in st.session_state:
    st.session_state.current_view = "home"
if "profile" not in st.session_state:
    st.session_state.profile = {"nome": "", "email": "", "cel": ""}
if "premium" not in st.session_state:
    st.session_state.premium = False
if "free_runs_left" not in st.session_state:
    st.session_state.free_runs_left = 3
if "service_data" not in st.session_state:
    st.session_state.service_data = {}
if "active_service" not in st.session_state:
    st.session_state.active_service = None

# -------------------------------------------------
# Servi√ßos - Casos Campe√µes
# -------------------------------------------------
SERVICES = {
    "cancelamento_assinaturas": {
        "title": "üìù Cancelamento de Assinaturas",
        "icon": "üìù",
        "description": "Cancele academias, apps, TV e servi√ßos de telefonia com argumentos jur√≠dicos",
        "category": "Consumidor",
        "steps": [
            "Informe os dados do servi√ßo",
            "Descreva o problema",
            "Gere sua carta de cancelamento"
        ]
    },
    "cobranca_indevida": {
        "title": "üí≥ Cobran√ßa Indevida",
        "icon": "üí≥",
        "description": "Dispute cobran√ßas abusivas de bancos, cart√µes e consignados",
        "category": "Financeiro",
        "steps": [
            "Informe os dados da cobran√ßa",
            "Descreva o problema",
            "Gere seu recurso"
        ]
    },
    "juros_abusivos": {
        "title": "üìä Juros Abusivos & CET",
        "icon": "üìä",
        "description": "Calcule juros abusivos e gere cartas para renegocia√ß√£o",
        "category": "Financeiro",
        "steps": [
            "Informe os dados do empr√©stimo",
            "Calcule o CET real",
            "Gere sua carta de reclama√ß√£o"
        ]
    },
    "transporte_aereo": {
        "title": "‚úàÔ∏è Transporte A√©reo (ANAC)",
        "icon": "‚úàÔ∏è",
        "description": "Resolva problemas com atrasos, cancelamentos e extravios de bagagem",
        "category": "Consumidor",
        "steps": [
            "Informe os dados do voo",
            "Descreva o problema",
            "Gere sua reclama√ß√£o na ANAC"
        ]
    },
    "telecom": {
        "title": "üìû Telecom (ANATEL)",
        "icon": "üìû",
        "description": "Resolva problemas com internet, telefone e TV por assinatura",
        "category": "Consumidor",
        "steps": [
            "Informe os dados do servi√ßo",
            "Descreva o problema",
            "Gere sua reclama√ß√£o na ANATEL"
        ]
    },
    "energia_agua": {
        "title": "üí° Energia & √Ågua",
        "icon": "üí°",
        "description": "Dispute contas abusivas de energia el√©trica e √°gua",
        "category": "Consumidor",
        "steps": [
            "Informe os dados da conta",
            "Descreva o problema",
            "Gere seu recurso √† ag√™ncia reguladora"
        ]
    },
    "analise_contratos": {
        "title": "üìÑ An√°lise de Contratos",
        "icon": "üìÑ",
        "description": "Analise contratos complexos e identifique cl√°usulas problem√°ticas",
        "category": "Jur√≠dico",
        "steps": [
            "Envie o contrato",
            "Configure a an√°lise",
            "Revise os resultados"
        ]
    }
}

# -------------------------------------------------
# Utils
# -------------------------------------------------
EMAIL_RE = re.compile(r"^[^\s@]+@[^\s@]+\.[^\s@]+$")
PHONE_RE = re.compile(r"^\+?\d{10,15}$")

def current_email() -> str:
    return (st.session_state.profile.get("email") or "").strip().lower()

def is_valid_email(v: str) -> bool:
    return bool(EMAIL_RE.match((v or "").strip()))

def is_valid_phone(v: str) -> bool:
    digits = re.sub(r"\D", "", v or "")
    return bool(PHONE_RE.match(digits))

def is_premium() -> bool:
    return st.session_state.premium

# -------------------------------------------------
# Templates de Documentos
# -------------------------------------------------
def generate_cancellation_letter(service_data: Dict) -> str:
    return f"""
CARTA DE CANCELAMENTO - {service_data.get('servico', '').upper()}

De: {service_data.get('nome', '')}
E-mail: {service_data.get('email', '')
CPF: {service_data.get('cpf', '')}

Para: {service_data.get('empresa', '')}
CNPJ: {service_data.get('cnpj', '')}

Assunto: Cancelamento de assinatura/service_data

Prezados Senhores,

Venho por meio desta comunicar o CANCELAMENTO imediato da assinatura/service_data contratado junto √† empresa {service_data.get('empresa', '')}, referente ao servi√ßo: {service_data.get('servico', '')}.

DADOS DO CONTRATO:
- N√∫mero do contrato: {service_data.get('numero_contrato', 'N√£o informado')}
- Data de in√≠cio: {service_data.get('data_inicio', 'N√£o informada')}
- Motivo do cancelamento: {service_data.get('motivo', '')}

{service_data.get('detalhes', '')}

Com fundamento no C√≥digo de Defesa do Consumidor (Lei 8.078/90), em especial nos artigos 39 e 42, solicito:

1. O cancelamento imediato do servi√ßo;
2. O bloqueio de quaisquer cobran√ßas futuras;
3. A confirma√ß√£o do cancelamento por e-mail;
4. O reembolso proporcional de eventuais valores pagos antecipadamente, se for o caso.

Atenciosamente,

{service_data.get('nome', '')}
{service_data.get('email', '')}
{service_data.get('telefone', '')}
"""

def generate_anac_complaint(service_data: Dict) -> str:
    return f"""
RECLAMA√á√ÉO ANAC - {service_data.get('companhia', '').upper()}

DADOS DO PASSAGEIRO:
Nome: {service_data.get('nome', '')}
CPF: {service_data.get('cpf', '')}
E-mail: {service_data.get('email', '')}
Telefone: {service_data.get('telefone', '')}

DADOS DO VOO:
Companhia A√©rea: {service_data.get('companhia', '')}
N√∫mero do Voo: {service_data.get('numero_voo', '')}
Data do Voo: {service_data.get('data_voo', '')}
Origem: {service_data.get('origem', '')}
Destino: {service_data.get('destino', '')}

DESCRI√á√ÉO DO PROBLEMA:
Tipo: {service_data.get('problema', '')}
Descri√ß√£o detalhada: {service_data.get('detalhes', '')}
Data/Hora do ocorrido: {service_data.get('data_ocorrido', '')}

PREJU√çZOS IDENTIFICADOS:
{service_data.get('prejuizos', '')}

COM BASE NA RESOLU√á√ÉO ANAC 400/2016, SOLICITO:

1. {service_data.get('solicitacao1', 'Provid√™ncias imediatas para resolver o ocorrido')}
2. {service_data.get('solicitacao2', 'Indeniza√ß√£o conforme previsto em lei')}
3. {service_data.get('solicitacao3', 'Resposta formal em at√© 30 dias')}

Atenciosamente,

{service_data.get('nome', '')}
"""

def generate_anatel_complaint(service_data: Dict) -> str:
    return f"""
RECLAMA√á√ÉO ANATEL - {service_data.get('operadora', '').upper()}

DADOS DO CLIENTE:
Nome: {service_data.get('nome', '')}
CPF: {service_data.get('cpf', '')}
E-mail: {service_data.get('email', '')}
Telefone: {service_data.get('telefone', '')}

DADOS DO SERVI√áO:
Operadora: {service_data.get('operadora', '')}
Tipo de Servi√ßo: {service_data.get('tipo_servico', '')}
N√∫mero do Contrato: {service_data.get('numero_contrato', '')}
Endere√ßo de Instala√ß√£o: {service_data.get('endereco', '')}

DESCRI√á√ÉO DO PROBLEMA:
{service_data.get('problema', '')}

Data do in√≠cio do problema: {service_data.get('data_inicio', '')}
J√° contactou a operadora? {service_data.get('contatou_operadora', 'N√£o')}
Protocolo na operadora: {service_data.get('protocolo_operadora', 'N√£o informado')}

DETALHES:
{service_data.get('detalhes', '')}

SOLICITA√á√ÉO:
De acordo com o C√≥digo de Defesa do Consumidor e regulamenta√ß√£o da ANATEL, solicito:

1. {service_data.get('solicitacao1', 'Solu√ß√£o imediata do problema relatado')}
2. {service_data.get('solicitacao2', 'Indeniza√ß√£o pelos danos sofridos')}
3. {service_data.get('solicitacao3', 'Cancelamento sem multa, se for o caso')}

Atenciosamente,

{service_data.get('nome', '')}
"""

# -------------------------------------------------
# Componentes de Interface
# -------------------------------------------------
def render_navigation():
    """Navega√ß√£o principal"""
    col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
    
    with col1:
        st.markdown(f"<h3 style='color: var(--clara-gold); margin: 0;'>CLARA LAW</h3>", unsafe_allow_html=True)
        st.caption("Intelig√™ncia para um mundo mais claro")
    
    with col2:
        if st.button("üè† In√≠cio", use_container_width=True, key="nav_home"):
            st.session_state.current_view = "home"
            st.session_state.active_service = None
    
    with col3:
        if st.button("üõ°Ô∏è Servi√ßos", use_container_width=True, key="nav_services"):
            st.session_state.current_view = "services"
            st.session_state.active_service = None
    
    with col4:
        if st.button("‚≠ê Premium", use_container_width=True, key="nav_premium"):
            st.session_state.current_view = "premium"

def render_hero_section():
    """Hero section impactante"""
    st.markdown("""
    <div class="clara-hero">
        <div class="clara-hero-content">
            <div class="clara-badge">‚öñÔ∏è ASSISTENTE JUR√çDICA PESSOAL</div>
            <h1 class="clara-title">Resolva problemas jur√≠dicos sem advogado caro</h1>
            <p class="clara-subtitle">
                Use a intelig√™ncia artificial da CLARA para cancelar assinaturas, disputar cobran√ßas, 
                reclamar de voos atrasados e muito mais. R√°pido, simples e eficaz.
            </p>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üëâ Ver Servi√ßos Dispon√≠veis", use_container_width=True, type="primary"):
            st.session_state.current_view = "services"
    
    st.markdown("</div></div>", unsafe_allow_html=True)

def render_services_grid():
    """Grid de servi√ßos funcionais"""
    st.markdown("""
    <div style='text-align: center; margin: 3rem 0;'>
        <h2>Como a CLARA pode te ajudar hoje?</h2>
        <p>Escolha o servi√ßo que voc√™ precisa:</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Filtros por categoria
    categories = list(set([service["category"] for service in SERVICES.values()]))
    selected_category = st.selectbox("Filtrar por categoria:", ["Todos"] + categories)
    
    st.markdown('<div class="clara-service-grid">', unsafe_allow_html=True)
    
    for service_id, service in SERVICES.items():
        if selected_category != "Todos" and service["category"] != selected_category:
            continue
            
        is_active = st.session_state.active_service == service_id
        card_class = "clara-card service-active" if is_active else "clara-card"
        
        st.markdown(f"""
        <div class="{card_class}">
            <div style='text-align: center;'>
                <div class="clara-feature-icon">{service['icon']}</div>
                <h3>{service['title']}</h3>
                <p style='color: var(--clara-gray); margin-bottom: 1.5rem;'>{service['description']}</p>
                <small style='color: var(--clara-gold); font-weight: 600;'>{service['category']}</small>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button(f"Usar {service['title'].split(' ')[0]}", key=f"btn_{service_id}", use_container_width=True):
            st.session_state.active_service = service_id
            st.session_state.current_view = "service_detail"
            st.rerun()

def render_service_detail():
    """Detalhe do servi√ßo selecionado"""
    if not st.session_state.active_service:
        st.session_state.current_view = "services"
        st.rerun()
        return
    
    service = SERVICES[st.session_state.active_service]
    
    st.markdown(f"""
    <div style='text-align: center; margin-bottom: 2rem;'>
        <h1>{service['icon']} {service['title']}</h1>
        <p>{service['description']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Mostrar etapas do processo
    st.markdown("### üìã Como funciona:")
    for i, step in enumerate(service["steps"], 1):
        st.markdown(f"""
        <div class="clara-step">
            <div class="clara-step-number">{i}</div>
            <div>
                <strong>{step}</strong>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Formul√°rio espec√≠fico do servi√ßo
    st.markdown("### üéØ Preencha as informa√ß√µes:")
    
    service_data = st.session_state.service_data.get(st.session_state.active_service, {})
    
    if st.session_state.active_service == "cancelamento_assinaturas":
        render_cancellation_service(service_data)
    elif st.session_state.active_service == "cobranca_indevida":
        render_billing_service(service_data)
    elif st.session_state.active_service == "juros_abusivos":
        render_interest_service(service_data)
    elif st.session_state.active_service == "transporte_aereo":
        render_airline_service(service_data)
    elif st.session_state.active_service == "telecom":
        render_telecom_service(service_data)
    elif st.session_state.active_service == "energia_agua":
        render_utility_service(service_data)
    elif st.session_state.active_service == "analise_contratos":
        render_contract_analysis()

def render_cancellation_service(service_data: Dict):
    """Servi√ßo de cancelamento de assinaturas"""
    with st.form("cancellation_form"):
        st.subheader("üìã Dados do Servi√ßo")
        
        col1, col2 = st.columns(2)
        with col1:
            empresa = st.text_input("Nome da Empresa*", value=service_data.get('empresa', ''))
            servico = st.text_input("Tipo de Servi√ßo*", value=service_data.get('servico', ''))
            numero_contrato = st.text_input("N√∫mero do Contrato", value=service_data.get('numero_contrato', ''))
        
        with col2:
            cnpj = st.text_input("CNPJ da Empresa", value=service_data.get('cnpj', ''))
            data_inicio = st.date_input("Data de In√≠cio", value=service_data.get('data_inicio', datetime.now()))
            valor_mensal = st.number_input("Valor Mensal (R$)", value=service_data.get('valor_mensal', 0.0))
        
        st.subheader("üéØ Motivo do Cancelamento")
        motivo = st.selectbox("Motivo Principal*", [
            "Servi√ßo insatisfat√≥rio",
            "Cobran√ßas indevidas", 
            "N√£o consigo cancelar",
            "Mudan√ßa de endere√ßo",
            "Problemas t√©cnicos",
            "Outro"
        ])
        
        detalhes = st.text_area("Descreva detalhadamente o problema*", 
                               value=service_data.get('detalhes', ''),
                               height=100,
                               placeholder="Exemplo: Tentei cancelar pelo app mas n√£o consegui, continuam cobrando mesmo ap√≥s solicita√ß√£o de cancelamento...")
        
        if st.form_submit_button("üìÑ Gerar Carta de Cancelamento", use_container_width=True):
            if empresa and servico and motivo and detalhes:
                letter_data = {
                    'empresa': empresa,
                    'servico': servico,
                    'numero_contrato': numero_contrato,
                    'cnpj': cnpj,
                    'data_inicio': data_inicio.strftime("%d/%m/%Y"),
                    'valor_mensal': valor_mensal,
                    'motivo': motivo,
                    'detalhes': detalhes,
                    'nome': st.session_state.profile.get('nome', ''),
                    'email': st.session_state.profile.get('email', ''),
                    'cpf': st.session_state.profile.get('cpf', ''),
                    'telefone': st.session_state.profile.get('cel', '')
                }
                
                carta = generate_cancellation_letter(letter_data)
                
                st.success("‚úÖ Carta gerada com sucesso!")
                st.download_button(
                    "üì• Baixar Carta de Cancelamento",
                    data=carta,
                    file_name=f"carta_cancelamento_{empresa}.txt",
                    mime="text/plain"
                )
                
                with st.expander("üìã Visualizar Carta"):
                    st.text_area("Sua carta:", carta, height=300)
            else:
                st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios (*)")

def render_billing_service(service_data: Dict):
    """Servi√ßo de cobran√ßa indevida"""
    st.info("üí° **Dica:** Use este servi√ßo para disputar cobran√ßas de bancos, cart√µes de cr√©dito, empr√©stimos consignados e outras cobran√ßas n√£o autorizadas.")
    
    with st.form("billing_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            empresa = st.text_input("Nome da Empresa/Banco*", value=service_data.get('empresa', ''))
            tipo_cobranca = st.selectbox("Tipo de Cobran√ßa*", [
                "Cart√£o de Cr√©dito",
                "Empr√©stimo Consignado", 
                "Tarifa Banc√°ria",
                "Assinatura N√£o Autorizada",
                "Seguro",
                "Outro"
            ])
            valor_cobranca = st.number_input("Valor Cobrado (R$)*", value=service_data.get('valor_cobranca', 0.0))
        
        with col2:
            data_cobranca = st.date_input("Data da Cobran√ßa*", value=service_data.get('data_cobranca', datetime.now()))
            numero_nota = st.text_input("N√∫mero da Nota/Fatura", value=service_data.get('numero_nota', ''))
            ja_reclamou = st.selectbox("J√° reclamou com a empresa?", ["N√£o", "Sim - Sem resposta", "Sim - Resposta insatisfat√≥ria"])
        
        descricao = st.text_area("Descreva por que esta cobran√ßa √© indevida*",
                                height=100,
                                placeholder="Exemplo: Esta cobran√ßa apareceu sem minha autoriza√ß√£o, nunca contratei este servi√ßo...")
        
        if st.form_submit_button("üìÑ Gerar Recurso", use_container_width=True):
            st.success("‚úÖ Recurso gerado! Em breve teremos templates espec√≠ficos para cada tipo de cobran√ßa.")

def render_interest_service(service_data: Dict):
    """Servi√ßo de juros abusivos"""
    st.info("üí° **Dica:** Calcule o CET real do seu empr√©stimo e gere uma carta para renegocia√ß√£o.")
    
    tab1, tab2 = st.tabs(["üßÆ Calculadora CET", "üìÑ Carta de Renegocia√ß√£o"])
    
    with tab1:
        st.subheader("Calculadora de Custo Efetivo Total")
        
        col1, col2 = st.columns(2)
        with col1:
            valor_emprestimo = st.number_input("Valor do Empr√©stimo (R$)*", min_value=0.0, value=1000.0)
            taxa_mensal = st.number_input("Taxa de Juros Mensal (%)*", min_value=0.0, value=5.0)
        
        with col2:
            parcelas = st.number_input("N√∫mero de Parcelas*", min_value=1, value=12)
            taxas_adicionais = st.number_input("Taxas Adicionais (R$)", min_value=0.0, value=50.0)
        
        if st.button("Calcular CET", use_container_width=True):
            try:
                cet = compute_cet_quick(valor_emprestimo, taxa_mensal/100, int(parcelas), taxas_adicionais)
                st.success(f"**CET Calculado:** {cet*100:.2f}% ao m√™s")
                
                if cet * 100 > 10:
                    st.error("‚ö†Ô∏è Esta taxa est√° muito acima da m√©dia de mercado! Recomendamos negociar.")
                elif cet * 100 > 5:
                    st.warning("‚ö†Ô∏è Esta taxa est√° acima da m√©dia. Pode valer a pena negociar.")
                else:
                    st.success("‚úÖ Taxa dentro dos par√¢metros razo√°veis.")
                    
            except Exception as e:
                st.error(f"Erro no c√°lculo: {str(e)}")
    
    with tab2:
        st.subheader("Carta de Renegocia√ß√£o")
        st.info("Em desenvolvimento - breve dispon√≠vel!")

def render_airline_service(service_data: Dict):
    """Servi√ßo para problemas com transporte a√©reo"""
    with st.form("airline_form"):
        st.subheader("‚úàÔ∏è Dados do Voo")
        
        col1, col2 = st.columns(2)
        with col1:
            companhia = st.text_input("Companhia A√©rea*", value=service_data.get('companhia', ''))
            numero_voo = st.text_input("N√∫mero do Voo*", value=service_data.get('numero_voo', ''))
            data_voo = st.date_input("Data do Voo*", value=service_data.get('data_voo', datetime.now()))
        
        with col2:
            origem = st.text_input("Cidade de Origem*", value=service_data.get('origem', ''))
            destino = st.text_input("Cidade de Destino*", value=service_data.get('destino', ''))
            passageiros = st.number_input("N√∫mero de Passageiros", min_value=1, value=1)
        
        st.subheader("üîç Problema Ocorrido")
        problema = st.selectbox("Tipo de Problema*", [
            "Atraso no voo",
            "Cancelamento do voo",
            "Extravio de bagagem",
            "Overbooking",
            "M√° atendimento",
            "Outro"
        ])
        
        detalhes = st.text_area("Descreva o ocorrido em detalhes*",
                               height=120,
                               placeholder="Exemplo: O voo atrasou 4 horas, perdemos conex√µes importantes...")
        
        prejuizos = st.text_area("Quais preju√≠zos voc√™ teve?",
                                height=80,
                                placeholder="Exemplo: Hotel extra, alimenta√ß√£o, compromissos perdidos...")
        
        if st.form_submit_button("üìÑ Gerar Reclama√ß√£o ANAC", use_container_width=True):
            if companhia and numero_voo and problema and detalhes:
                complaint_data = {
                    'companhia': companhia,
                    'numero_voo': numero_voo,
                    'data_voo': data_voo.strftime("%d/%m/%Y"),
                    'origem': origem,
                    'destino': destino,
                    'problema': problema,
                    'detalhes': detalhes,
                    'prejuizos': prejuizos,
                    'nome': st.session_state.profile.get('nome', ''),
                    'email': st.session_state.profile.get('email', ''),
                    'cpf': st.session_state.profile.get('cpf', ''),
                    'telefone': st.session_state.profile.get('cel', '')
                }
                
                carta = generate_anac_complaint(complaint_data)
                
                st.success("‚úÖ Reclama√ß√£o ANAC gerada com sucesso!")
                st.download_button(
                    "üì• Baixar Reclama√ß√£o ANAC",
                    data=carta,
                    file_name=f"reclamacao_anac_{companhia}.txt",
                    mime="text/plain"
                )
                
                with st.expander("üìã Visualizar Reclama√ß√£o"):
                    st.text_area("Sua reclama√ß√£o:", carta, height=300)
            else:
                st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios (*)")

def render_telecom_service(service_data: Dict):
    """Servi√ßo para problemas com telecomunica√ß√µes"""
    with st.form("telecom_form"):
        st.subheader("üìû Dados do Servi√ßo")
        
        col1, col2 = st.columns(2)
        with col1:
            operadora = st.text_input("Operadora*", value=service_data.get('operadora', ''))
            tipo_servico = st.selectbox("Tipo de Servi√ßo*", [
                "Internet Banda Larga",
                "Telefone Fixo",
                "TV por Assinatura",
                "Telefone M√≥vel",
                "Combo"
            ])
        
        with col2:
            numero_contrato = st.text_input("N√∫mero do Contrato", value=service_data.get('numero_contrato', ''))
            endereco = st.text_input("Endere√ßo de Instala√ß√£o", value=service_data.get('endereco', ''))
        
        st.subheader("üîç Problema Reportado")
        problema = st.selectbox("Tipo de Problema*", [
            "Falha no servi√ßo",
            "Lentid√£o da internet",
            "Cobran√ßas indevidas",
            "Mau atendimento",
            "Problemas t√©cnicos persistentes",
            "Outro"
        ])
        
        data_inicio = st.date_input("Data do in√≠cio do problema*", value=service_data.get('data_inicio', datetime.now()))
        
        contatou_operadora = st.selectbox("J√° contactou a operadora?", ["N√£o", "Sim - Sem solu√ß√£o", "Sim - Em processamento"])
        protocolo_operadora = st.text_input("Protocolo na operadora (se houver)", value=service_data.get('protocolo_operadora', ''))
        
        detalhes = st.text_area("Descreva o problema em detalhes*",
                               height=120,
                               placeholder="Exemplo: A internet cai diariamente, a velocidade est√° muito abaixo do contratado...")
        
        if st.form_submit_button("üìÑ Gerar Reclama√ß√£o ANATEL", use_container_width=True):
            if operadora and tipo_servico and problema and detalhes:
                complaint_data = {
                    'operadora': operadora,
                    'tipo_servico': tipo_servico,
                    'numero_contrato': numero_contrato,
                    'endereco': endereco,
                    'problema': problema,
                    'data_inicio': data_inicio.strftime("%d/%m/%Y"),
                    'contatou_operadora': contatou_operadora,
                    'protocolo_operadora': protocolo_operadora,
                    'detalhes': detalhes,
                    'nome': st.session_state.profile.get('nome', ''),
                    'email': st.session_state.profile.get('email', ''),
                    'cpf': st.session_state.profile.get('cpf', ''),
                    'telefone': st.session_state.profile.get('cel', '')
                }
                
                carta = generate_anatel_complaint(complaint_data)
                
                st.success("‚úÖ Reclama√ß√£o ANATEL gerada com sucesso!")
                st.download_button(
                    "üì• Baixar Reclama√ß√£o ANATEL",
                    data=carta,
                    file_name=f"reclamacao_anatel_{operadora}.txt",
                    mime="text/plain"
                )
            else:
                st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios (*)")

def render_utility_service(service_data: Dict):
    """Servi√ßo para problemas com energia e √°gua"""
    st.info("üí° **Dica:** Use para disputar contas abusivas de energia el√©trica, √°gua e g√°s.")
    
    with st.form("utility_form"):
        tipo_conta = st.selectbox("Tipo de Conta*", ["Energia El√©trica", "√Ågua/Esgoto", "G√°s"])
        
        col1, col2 = st.columns(2)
        with col1:
            empresa = st.text_input("Nome da Concession√°ria*",
