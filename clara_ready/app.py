# app.py ‚Äî CLARA ‚Ä¢ An√°lise de Contratos (v15)
# "Mobile‚Äëfirst, medi√ß√£o certa e observabilidade de visitas"
# ----------------------------------------------------------------------------
# O QUE MUDOU NESTA VERS√ÉO
# 1) Medi√ß√£o: TikTok Pixel (pageview + eventos FileUpload/AnalysisCompleted) e Hotjar fix
# 2) UX mobile: bot√µes grandes, contraste, mensagens claras, barra de progresso
# 3) OCR autom√°tico: imagem/PDF escaneado vira texto (pytesseract/pdf2image), sem pedir "copiar e colar"
# 4) UTM/referrer e log de visitas: grava em CSV (visits.csv) com session_id, hor√°rios,
#    utm_source/medium/campaign/content, referrer, user_agent (via streamlit_js_eval se dispon√≠vel)
# 5) Mini‚Äëdashboard de funil: PageViews, Uploads, An√°lises e Leads no Admin
# 6) Mant√©m Stripe checkout/verify, compute_cet_quick, summarize_hits, logs de an√°lise e assinantes
# ----------------------------------------------------------------------------

from __future__ import annotations

import os
import io
import re
import csv
import json
import time
import uuid
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Tuple, Set, List, Optional

import streamlit as st

# ---- m√≥dulos locais (mant√™m sua estrutura) ----
from app_modules.pdf_utils import extract_text_from_pdf
from app_modules.analysis import analyze_contract_text, summarize_hits, compute_cet_quick
from app_modules.stripe_utils import init_stripe, create_checkout_session, verify_checkout_session
from app_modules.storage import (
    init_db,
    log_analysis_event,
    log_subscriber,
    list_subscribers,
    get_subscriber_by_email,
)

# ----------------------------------------------------------------------------
# Configs
# ----------------------------------------------------------------------------
APP_TITLE = "CLARA ‚Ä¢ An√°lise de Contratos"
VERSION = "v15"

st.set_page_config(page_title=APP_TITLE, page_icon="üìÑ", layout="wide")

# Secrets / env
STRIPE_PUBLIC_KEY = st.secrets.get("STRIPE_PUBLIC_KEY", "")
STRIPE_SECRET_KEY = st.secrets.get("STRIPE_SECRET_KEY", "")
PRICING_PRODUCT_ID = st.secrets.get("STRIPE_PRICE_ID", "price_xxx")

TIKTOK_PIXEL_ID = st.secrets.get("TIKTOK_PIXEL_ID", "")  # ex.: TT-XXXXXXX
HOTJAR_ID = st.secrets.get("HOTJAR_ID", "6519667")
HOTJAR_SV = st.secrets.get("HOTJAR_SV", "6")

DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)
VISITS_CSV = DATA_DIR / "visits.csv"

# ----------------------------------------------------------------------------
# Utilidades gerais
# ----------------------------------------------------------------------------

def now_iso() -> str:
    return datetime.utcnow().isoformat()


def ensure_csv_headers(path: Path, headers: List[str]):
    if not path.exists():
        with path.open("w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(headers)


def safe_str(x: Any) -> str:
    try:
        return str(x)
    except Exception:
        return ""


# ----------------------------------------------------------------------------
# Inje√ß√µes: Hotjar e TikTok Pixel (sem aparecer na tela)
# ----------------------------------------------------------------------------

def inject_hotjar(hjid: str, hjsv: str = "6"):
    if not hjid:
        return
    snippet = f"""
    <script>
      (function(h,o,t,j,a,r){{
          h.hj=h.hj||function(){{(h.hj.q=h.hj.q||[]).push(arguments)}};
          h._hjSettings={{hjid:{hjid},hjsv:{hjsv}}};
          a=o.getElementsByTagName('head')[0];
          r=o.createElement('script');r.async=1;
          r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
          a.appendChild(r);
      }})(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
    </script>
    """
    st.components.v1.html(snippet, height=0)


def inject_tiktok_pixel(pixel_id: str):
    if not pixel_id:
        return
    pixel = f"""
    <!-- TikTok Pixel -->
    <script>
    !function (w, d, t) {{
      w.TiktokAnalyticsObject = t; var ttq = w[t] = w[t] || [];
      ttq.methods = ["page","track","identify","instances","debug","on","off","once","ready","alias","group","enableCookie","disableCookie"];
      ttq.setAndDefer = function(t, e) {{ t[e] = function() {{ t.push([e].concat(Array.prototype.slice.call(arguments,0))) }} }};
      for (var i = 0; i < ttq.methods.length; i++) ttq.setAndDefer(ttq, ttq.methods[i]);
      ttq.instance = function(t) {{ var e = ttq._i[t] || []; return e.push = ttq.push, e }};
      ttq.load = function(e, n) {{
        var i = "https://analytics.tiktok.com/i18n/pixel/events.js";
        ttq._i = ttq._i || {{}}; ttq._i[e] = []; ttq._i[e]._u = i;
        ttq._t = ttq._t || {{}}; ttq._t[e] = +new Date; ttq._o = ttq._o || {{}};
        var o = document.createElement("script"); o.type = "text/javascript"; o.async = !0; o.src = i + "?sdkid=" + e + "&lib=" + t;
        var a = document.getElementsByTagName("script")[0]; a.parentNode.insertBefore(o, a);
      }};
      ttq.load("{pixel_id}"); ttq.page();
    }}(window, document, 'ttq');
    </script>
    """
    st.components.v1.html(pixel, height=0)


def ttq_track(event: str, params: Optional[dict] = None):
    if not TIKTOK_PIXEL_ID:
        return
    params = params or {}
    try:
        params_json = json.dumps(params)
    except Exception:
        params_json = "{}"
    script = f"""
    <script>
      if (window.ttq) {{ ttq.track("{event}", {params_json}); }}
    </script>
    """
    st.components.v1.html(script, height=0)


# ----------------------------------------------------------------------------
# Captura de UTM/referrer/UA (sem depender do servidor)
# ----------------------------------------------------------------------------
# - UTMs: via st.query_params
# - Referrer/UserAgent: tenta via streamlit_js_eval; se n√£o houver, registra vazio

try:
    from streamlit_js_eval import get_user_agent, get_page_location
except Exception:
    get_user_agent = None
    get_page_location = None


def get_utms() -> Dict[str, str]:
    qp = getattr(st, "query_params", None)
    # Compatibilidade com vers√µes antigas do Streamlit
    if qp is None:
        try:
            qp = st.experimental_get_query_params()
        except Exception:
            qp = {}
    # query_params pode ser Mapping -> valores lista
    def pick(name: str) -> str:
        v = qp.get(name)
        if isinstance(v, list):
            return v[0]
        return v or ""
    return {
        "utm_source": pick("utm_source"),
        "utm_medium": pick("utm_medium"),
        "utm_campaign": pick("utm_campaign"),
        "utm_content": pick("utm_content"),
        "utm_term": pick("utm_term"),
    }


def get_ua_and_referrer() -> Tuple[str, str]:
    ua, ref = "", ""
    try:
        if get_user_agent:
            ua = get_user_agent()
        if get_page_location:
            loc = get_page_location()
            if isinstance(loc, dict):
                ref = safe_str(loc.get("href", ""))
            else:
                ref = safe_str(loc)
    except Exception:
        pass
    return ua, ref


# ----------------------------------------------------------------------------
# Log de visitas (CSV simples)
# ----------------------------------------------------------------------------
VISIT_HEADERS = [
    "ts",
    "session_id",
    "event",
    "utm_source",
    "utm_medium",
    "utm_campaign",
    "utm_content",
    "utm_term",
    "referrer",
    "user_agent",
    "file_name",
]

ensure_csv_headers(VISITS_CSV, VISIT_HEADERS)


def get_session_id() -> str:
    if "session_id" not in st.session_state:
        st.session_state["session_id"] = hashlib.sha1(os.urandom(24)).hexdigest()
    return safe_str(st.session_state["session_id"])


def log_visit_event(name: str, extra: Optional[Dict[str, str]] = None):
    extra = extra or {}
    utms = get_utms()
    ua, ref = get_ua_and_referrer()
    row = {
        "ts": now_iso(),
        "session_id": get_session_id(),
        "event": name,
        "utm_source": utms.get("utm_source", ""),
        "utm_medium": utms.get("utm_medium", ""),
        "utm_campaign": utms.get("utm_campaign", ""),
        "utm_content": utms.get("utm_content", ""),
        "utm_term": utms.get("utm_term", ""),
        "referrer": ref,
        "user_agent": ua,
    }
    row.update({k: safe_str(v) for k, v in extra.items() if k not in row})
    try:
        with VISITS_CSV.open("a", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=VISIT_HEADERS)
            writer.writerow(row)
    except Exception as e:
        # streamlit n√£o tem st.debug; usamos print silencioso para logs de servidor
        print(f"[visits.csv] Falha ao gravar visita: {e}")


# ----------------------------------------------------------------------------
# OCR autom√°tico (fallback)
# ----------------------------------------------------------------------------
# Tenta importar depend√™ncias. Se n√£o existirem, o app continua sem OCR.

_HAS_OCR = True
try:
    import pytesseract  # type: ignore
    from pdf2image import convert_from_bytes  # type: ignore
    from PIL import Image  # type: ignore
except Exception:
    _HAS_OCR = False


def ocr_bytes(data: bytes) -> str:
    if not _HAS_OCR:
        return ""
    # 1) Tenta abrir como imagem direta (JPG/PNG)
    try:
        img = Image.open(io.BytesIO(data))
        return pytesseract.image_to_string(img, lang="por+eng")
    except Exception:
        pass
    # 2) Caso seja PDF ‚Üí converter p√°ginas e extrair
    try:
        pages = convert_from_bytes(data, dpi=300)
        texts: List[str] = []
        for pg in pages:
            texts.append(pytesseract.image_to_string(pg, lang="por+eng"))
        return "\n".join(texts)
    except Exception:
        return ""


# ----------------------------------------------------------------------------
# UI/Estilos (contraste e legibilidade no mobile)
# ----------------------------------------------------------------------------

CSS_STYLE = """
<style>
  .block-container { padding-top: 0.6rem; }
  div[data-testid="stFileUploader"] {
    border: 1px solid rgba(0,0,0,0.12);
    border-radius: 12px; padding: 12px; background: rgba(0,0,0,0.02);
  }
  .muted { color: #666; font-size: 0.9rem; }
  .caption { color: #444; font-size: 0.82rem; }
  .ok-badge { display:inline-block; padding: 4px 8px; border-radius: 999px; background: #e6f4ea; }
  .warn-badge { display:inline-block; padding: 4px 8px; border-radius: 999px; background: #fff7e6; }
  .error-badge { display:inline-block; padding: 4px 8px; border-radius: 999px; background: #fdecea; }
  .cta { font-weight: 600; }
</style>
"""

st.markdown(CSS_STYLE, unsafe_allow_html=True)


# ----------------------------------------------------------------------------
# Layout topo com navega√ß√£o simples
# ----------------------------------------------------------------------------

st.title(APP_TITLE)

# Navega√ß√£o (In√≠cio / Analisar) ‚Äî traz de volta a p√°gina inicial explicativa
DEFAULT_TAB = st.session_state.get("__tab__", "In√≠cio")
nav = st.radio("", ["In√≠cio", "Analisar"], index=0 if DEFAULT_TAB=="In√≠cio" else 1, horizontal=True)
st.session_state["__tab__"] = nav

if nav == "In√≠cio":
    # Hero profissional com copy clara sobre o problema que a Clara resolve
    st.markdown(
        """
        <style>
            .hero{padding:28px 22px;border-radius:16px;background:linear-gradient(135deg,#f7f7fb,#eef6ff);border:1px solid rgba(0,0,0,.06);}
            .hero h1{margin:0 0 8px 0; font-size: 2.0rem;}
            .hero p{margin:0; font-size:1.02rem; color:#333}
            .card{border:1px solid rgba(0,0,0,.08);border-radius:14px;padding:14px;background:#fff}
        </style>
        <div class=\"hero\">
            <h1>Clara ‚Äî an√°lise inteligente de contratos</h1>
            <p>Envie um PDF ou foto e receba, em segundos, um resumo claro com pontos de aten√ß√£o e, quando fizer sentido, a estimativa de CET.</p>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # Copy solicitada ‚Äî crise silenciosa
    st.markdown(
        """
        **A frase ‚ÄúEu li e concordo com os termos e condi√ß√µes‚Äù virou s√≠mbolo de uma crise silenciosa no Brasil.**
        Empres√°rios frequentemente **negligenciam a leitura profunda** dos contratos que assinam e isso os exp√µe a **vulnerabilidades evit√°veis**.
        Milh√µes de brasileiros firmam documentos legais **sem entender completamente** o que est√£o aceitando ‚Äî colocando **neg√≥cios e patrim√¥nio em risco desnecess√°rio**.
        A **Clara** nasceu para reduzir esse risco: transformar contratos em **informa√ß√£o compreens√≠vel**, com os alertas certos, antes da decis√£o.
        """
    )

    st.markdown("### O que a Clara resolve")
    colh1, colh2, colh3 = st.columns(3)
    with colh1:
        st.markdown("""
        <div class=\"card\"><strong>Leitura r√°pida</strong><br/>Extrai o texto do PDF ou foto (OCR autom√°tico) e identifica cl√°usulas sens√≠veis.</div>
        """, unsafe_allow_html=True)
    with colh2:
        st.markdown("""
        <div class=\"card\"><strong>Transpar√™ncia</strong><br/>Mostra os <em>trechos</em> que embasam cada ponto de aten√ß√£o em linguagem simples.</div>
        """, unsafe_allow_html=True)
    with colh3:
        st.markdown("""
        <div class=\"card\"><strong>CET em segundos</strong><br/>Para contratos de cr√©dito, estimamos rapidamente o CET quando aplic√°vel.</div>
        """, unsafe_allow_html=True)

    st.markdown("### Como usar")
    st.markdown("1) Clique em **Come√ßar agora**  ‚Ä¢  2) **Envie** o contrato (PDF/JPG/PNG)  ‚Ä¢  3) **Receba** o resumo e os alertas.")

    if st.button("üöÄ Come√ßar agora", type="primary"):
        st.session_state["__tab__"] = "Analisar"
        st.experimental_rerun()

# Injeta medi√ß√µes no in√≠cio

inject_hotjar(HOTJAR_ID, HOTJAR_SV)
inject_tiktok_pixel(TIKTOK_PIXEL_ID)

# Loga pageview imediatamente
log_visit_event("PageView")

# Tamb√©m registra PageView no TikTok
ttq_track("PageView", {"value": 1})


# ----------------------------------------------------------------------------
# Sidebar: Plano/Stripe, Ajuda e Admin
# ----------------------------------------------------------------------------

with st.sidebar:
    st.header("Plano & Ajuda")
    st.write("Se precisar de ajuda, fale com a gente pelo WhatsApp.")

    st.divider()
    st.subheader("Assinatura")

    # Inicializa√ß√£o segura do Stripe (n√£o quebra a aplica√ß√£o se faltar secret ou a assinatura mudar)
    STRIPE_ENABLED = bool(PRICING_PRODUCT_ID and (STRIPE_SECRET_KEY or STRIPE_PUBLIC_KEY))
    if STRIPE_ENABLED:
        try:
            # Tenta assinatura antiga (1 arg) primeiro ‚Äî evita TypeError:
            try:
                init_stripe(STRIPE_SECRET_KEY or STRIPE_PUBLIC_KEY)
            except TypeError:
                # Fallback para assinatura nova (2 args):
                init_stripe(STRIPE_PUBLIC_KEY, STRIPE_SECRET_KEY)

            if st.button("Assinar CLARA Pro", use_container_width=True):
                session_url = create_checkout_session(PRICING_PRODUCT_ID)
                if session_url:
                    st.success("Abrindo checkout‚Ä¶")
                    st.markdown(f"[Ir para o pagamento]({session_url})")
                    log_visit_event("CheckoutStart")
                    ttq_track("InitiateCheckout", {"value": 1})
                else:
                    st.error("N√£o consegui iniciar o checkout agora. Tente novamente em instantes.")
        except Exception as e:
            STRIPE_ENABLED = False
            st.warning("Stripe indispon√≠vel neste ambiente. Verifique as secrets e o m√≥dulo stripe_utils.")
    if not STRIPE_ENABLED:
        st.info("Stripe n√£o configurado ou indispon√≠vel neste ambiente.")

    st.divider()
    st.subheader("Admin")
    admin_mode = st.toggle("Exibir painel Admin", value=False)


# ----------------------------------------------------------------------------
# √Årea principal ‚Äî Fluxo de an√°lise
# ----------------------------------------------------------------------------

# Navega√ß√£o temporariamente unificada para evitar erro de indenta√ß√£o durante ajustes
SHOW_ANALYSIS = True

st.markdown("### 1) Envie seu contrato")
st.markdown("**Formatos aceitos:** PDF, JPG, PNG. Se for foto/scan, eu leio com OCR automaticamente.")

uploaded = st.file_uploader("Envie o arquivo (at√© ~25 MB)", type=["pdf","jpg","jpeg","png"], accept_multiple_files=False)

if uploaded is not None:
    # Confirma√ß√£o visual do arquivo
    st.success(f"Arquivo recebido: {uploaded.name}")
    log_visit_event("FileUpload", {"file_name": uploaded.name})
    ttq_track("FileUpload", {"content_type": "contract", "file_name": uploaded.name})

    # Configura√ß√µes r√°pidas
    st.markdown("### 2) Prefer√™ncias de an√°lise")
    colA, colB, colC = st.columns(3)
    with colA:
        lang_pt = st.checkbox("An√°lise em Portugu√™s", value=True)
    with colB:
        want_summary = st.checkbox("Resumo amig√°vel", value=True)
    with colC:
        calc_cet = st.checkbox("Estimar CET (se aplic√°vel)", value=True)

    if st.button("üîé Analisar agora", type="primary"):
        with st.status("Lendo e analisando o contrato‚Ä¶", expanded=True) as status:
            status.write("Extraindo texto‚Ä¶")
            data = uploaded.read()

            # 1) Extrai texto do PDF (ou retorna vazio se imagem)
            text = ""
            try:
                text = extract_text_from_pdf(data)
            except Exception:
                text = ""

            # 2) Se texto curto ‚Üí tenta OCR
            if not text or len(text.strip()) < 30:
                if _HAS_OCR:
                    status.write("Arquivo parece imagem/scan. Rodando OCR‚Ä¶")
                    text = ocr_bytes(data)
                else:
                    status.write("N√£o consegui ler texto do arquivo (OCR indispon√≠vel neste ambiente).")

            if not text or len(text.strip()) < 30:
                st.warning("N√£o consegui ler o conte√∫do. Tente uma foto mais n√≠tida ou um PDF com melhor qualidade.")
                status.update(label="Leitura falhou", state="error")
            else:
                status.write("Rodando an√°lise sem√¢ntica‚Ä¶")
                try:
                    hits = analyze_contract_text(text, lang="pt" if lang_pt else "en")
                except Exception as e:
                    st.error(f"Falha na an√°lise: {e}")
                    status.update(label="An√°lise falhou", state="error")
                    hits = None

                if hits is not None:
                    status.write("Gerando resumo‚Ä¶")
                    summary = summarize_hits(hits, lang="pt" if lang_pt else "en") if want_summary else None

                    cet_block = None
                    if calc_cet:
                        try:
                            cet_block = compute_cet_quick(text)
                        except Exception:
                            cet_block = None

                    # Loga evento de an√°lise conclu√≠da
                    log_analysis_event(get_session_id(), uploaded.name, len(text))
                    log_visit_event("AnalysisCompleted", {"file_name": uploaded.name})
                    ttq_track("AnalysisCompleted", {"value": 1})

                    status.update(label="An√°lise conclu√≠da", state="complete")

                    # Apresenta√ß√£o de resultados
                    st.markdown("## Resultado da an√°lise")

                    if summary:
                        st.subheader("Resumo (para humanos)")
                        st.write(summary)

                    st.subheader("Pontos de aten√ß√£o")
                    st.write(hits)

                    if cet_block:
                        st.subheader("Estimativa de CET")
                        st.write(cet_block)

                    st.info("Lembrete: esta ferramenta n√£o substitui aconselhamento jur√≠dico.")

                    st.markdown("### Quer receber o PDF do relat√≥rio por e‚Äëmail?")
                    email = st.text_input("Seu e‚Äëmail")
                    if st.button("Enviar relat√≥rio"):
                        if email and "@" in email:
                            log_subscriber(email)
                            log_visit_event("Lead", {"email": email})
                            st.success("Obrigado! Enviaremos em breve.")
                        else:
                            st.warning("Digite um e‚Äëmail v√°lido.")

else:
    st.info("Dica: se voc√™ n√£o tiver o PDF, pode tirar uma **foto n√≠tida** do contrato e enviar em JPG/PNG.")


# ----------------------------------------------------------------------------
# Admin / Observabilidade
# ----------------------------------------------------------------------------

if admin_mode:
    st.header("Painel Admin")

    # Contadores simples do funil
    pv = up = ac = ld = 0
    try:
        with VISITS_CSV.open("r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            rows = list(reader)
        for r in rows:
            ev = r.get("event", "")
            if ev == "PageView": pv += 1
            elif ev == "FileUpload": up += 1
            elif ev == "AnalysisCompleted": ac += 1
            elif ev == "Lead": ld += 1
        st.metric("PageViews", pv)
        st.metric("Uploads", up)
        st.metric("An√°lises", ac)
        st.metric("Leads", ld)

        st.subheader("Visitas recentes")
        st.dataframe(rows[-200:] if len(rows) > 200 else rows, use_container_width=True)

    except Exception as e:
        st.write("N√£o consegui abrir o visits.csv ainda.")
        st.write(e)

    st.divider()
    st.subheader("Assinantes (Stripe/Newsletter)")
    try:
        subs = list_subscribers()
        if subs:
            st.dataframe(subs, use_container_width=True)
        else:
            st.caption("Nenhum assinante listado.")
    except Exception:
        st.caption("list_subscribers() indispon√≠vel neste ambiente.")


# ----------------------------------------------------------------------------
# Rodap√© / FAQ curto
# ----------------------------------------------------------------------------
with st.expander("Como funciona a leitura de documentos?"):
    st.markdown(
        """
        - Se o PDF tiver **texto** embutido, extra√≠mos diretamente.
        - Se for uma **foto** ou **scan**, usamos OCR para converter imagem em texto automaticamente.
        - Depois, rodamos uma an√°lise sem√¢ntica que destaca **pontos de aten√ß√£o** e, se aplic√°vel, estimamos **CET**.
        """
    )

with st.expander("Privacidade"):
    st.markdown(
        """
        - Seu arquivo √© processado para an√°lise e n√£o √© compartilhado.
        - Registramos apenas **m√©tricas de uso** (PageView, Upload, An√°lise) com identificador de sess√£o an√¥nimo para
          melhorar a experi√™ncia e medir convers√µes. Voc√™ pode bloquear cookies/pixels no seu navegador se preferir.
        """
    )


# ----------------------------------------------------------------------------
# Notas t√©cnicas e compatibilidade
# ----------------------------------------------------------------------------
# - Caso pytesseract/pdf2image n√£o estejam instalados, o OCR √© silenciosamente desativado e exibimos uma
#   mensagem amig√°vel. Para ativar, instale: `pytesseract`, `pdf2image`, `poppler` (sistema) e `Pillow`.
# - Para Stripe: defina STRIPE_PUBLIC_KEY, STRIPE_SECRET_KEY e STRIPE_PRICE_ID em st.secrets.
# - Para TikTok Pixel: defina TIKTOK_PIXEL_ID em st.secrets. Hotjar usa HOTJAR_ID/HOTJAR_SV.
# - O CSV de visitas √© gravado em ./data/visits.csv.
# - Este arquivo preserva as assinaturas das fun√ß√µes importadas de app_modules/* para manter compatibilidade.
#
# Fim do app.py v15





